#pragma kernel SetRandom;
#pragma kernel Init;
#pragma kernel Collisions;
#pragma kernel Streaming;
#pragma kernel Boundaries;

RWStructuredBuffer<float4> pixels3D;
RWStructuredBuffer<float> f;
uint DIM;
int lidWidth;
uint offsetx;
uint offsety;
uint offsetz;
float u_lid,v_lid,w_lid,rho0,tau;
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

[numthreads(8, 8, 8)]
void SetRandom(uint3 id : SV_DispatchThreadID)
{
    pixels3D[id.x + id.y*DIM + id.z*DIM*DIM] = float4(
        Random((id.x + id.y*DIM + id.z*DIM*DIM) * offsetx + offsetx),
        Random((id.x + id.y*DIM + id.z*DIM*DIM) * offsety + offsety),
        Random((id.x + id.y*DIM + id.z*DIM*DIM) * offsetz + offsetz),
        1.0
    );
}

[numthreads(8, 8, 8)]
void Init(uint3 id : SV_DispatchThreadID)
{
    const float t1 = 8. / 27.;
    const float t2 = 2. / 27.;
    const float t3 = 1. / 54.;
    const float t4 = 1. / 216.;
    float weights[27] = {t1,t2,t2,t2,t2,t2,t2,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t4,t4,t4,t4,t4,t4,t4,t4};
    int ex[27] = {0, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1};
    int ey[27] = {0, 0, 0, 1,-1, 0, 0, 1, 1,-1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1, 1,-1,-1, 1, 1,-1,-1};
    int ez[27] = {0, 0, 0, 0, 0, 1,-1, 0, 0, 0, 0, 1, 1,-1,-1, 1, 1,-1,-1, 1, 1, 1, 1,-1,-1,-1,-1};

    int gridIndex = (int)(id.x + id.y*DIM + id.z*DIM*DIM);
    float u = 0;
    float v = 0;
    float w = 0;
    if(id.y >= DIM - lidWidth)
    {
        u = u_lid;
        v = v_lid;
        w = w_lid;
    }
    float u2 = u*u + v*v + w*w;
    int i,j;
    for(i = 0; i < 27; i++)
    {
        float eu = ex[i] * u
        + ey[i] * v
        + ez[i] * w;

        int fIndex = gridIndex*27 + i;
        f[fIndex] = weights[i] * rho0 * (1.0 + 3.0*eu + 4.5*eu*eu - 1.5*u2);
        f[DIM*DIM*DIM*27  + fIndex] = f[fIndex];
    }

    pixels3D[gridIndex] = float4(u+0.5,v+0.5,w+0.5,1); 
}

[numthreads(8, 8, 8)]
void Collisions(uint3 id : SV_DispatchThreadID)
{
    int gridIndex = (int)(id.x + id.y*DIM + id.z*DIM*DIM);
    const float t1 = 8. / 27.;
    const float t2 = 2. / 27.;
    const float t3 = 1. / 54.;
    const float t4 = 1. / 216.;
    float weights[27] = {t1,t2,t2,t2,t2,t2,t2,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t4,t4,t4,t4,t4,t4,t4,t4};
    int ex[27] = {0, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1};
    int ey[27] = {0, 0, 0, 1,-1, 0, 0, 1, 1,-1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1, 1,-1,-1, 1, 1,-1,-1};
    int ez[27] = {0, 0, 0, 0, 0, 1,-1, 0, 0, 0, 0, 1, 1,-1,-1, 1, 1,-1,-1, 1, 1, 1, 1,-1,-1,-1,-1};

    float u = 0;
    float v = 0;
    float w = 0;
    float rho = 0;

    int i;
    for(i = 0; i < 27; i++)
    {
        int fIndex = gridIndex*27 + i;
        rho += f[fIndex];
    }
    for(i = 0; i < 27; i++)
    {
        int fIndex = gridIndex*27 + i;
        u += f[fIndex]*ex[i]/rho;
        v += f[fIndex]*ey[i]/rho;
        w += f[fIndex]*ez[i]/rho;
    }

    if(id.y >= DIM - lidWidth)
    {
        u = u_lid;
        v = v_lid;
        w = w_lid;
    }

    float u2 = u*u + v*v + w*w;

    for(i = 0; i < 27; i++)
    {
        int fIndex = gridIndex*27 + i;
        float eu = ex[i] * u
        + ey[i] * v
        + ez[i] * w;
        float feq = weights[i]*rho*(1.0 + 3.0*eu + 4.5*eu*eu - 1.5*u2);

        f[fIndex] = f[fIndex] - (f[fIndex] - feq)/tau;
        f[DIM*DIM*DIM*27  + fIndex] = f[fIndex];
    }
}

[numthreads(8, 8, 8)]
void Streaming(uint3 id : SV_DispatchThreadID)
{
    int gridIndex = (int)(id.x + id.y*DIM + id.z*DIM*DIM);
    //////////////0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26
    int ex[27] = {0, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1};
    int ey[27] = {0, 0, 0, 1,-1, 0, 0, 1, 1,-1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1, 1,-1,-1, 1, 1,-1,-1};
    int ez[27] = {0, 0, 0, 0, 0, 1,-1, 0, 0, 0, 0, 1, 1,-1,-1, 1, 1,-1,-1, 1, 1, 1, 1,-1,-1,-1,-1};
    
    int i;
    for(i = 0; i < 27; i++)
    {
        int fIndex = gridIndex*27 + i;
        int dx = (int)id.x + (int)ex[i];
        int dy = (int)id.y + (int)ey[i];
        int dz = (int)id.z + (int)ez[i];
        
        int dfIndex = (int)(dx + dy*DIM + dz*DIM*DIM)*27 + i;

        if(
            dx < (int)DIM &&
            dx >= 0 &&
            dy < (int)DIM &&
            dy >= 0 &&
            dz < (int)DIM &&
            dz >= 0 
        )
        {
            f[dfIndex] = f[DIM*DIM*DIM*27 + fIndex];
        }
    }
}

[numthreads(8, 8, 1)]
void Boundaries(uint3 id : SV_DispatchThreadID)
{
    int opposites[27] = {0,2,1,4,3,6,5,10,9,8,7,14,13,12,11,18,17,16,15,26,25,24,23,22,21,20,19};
    int ex[27] = {0, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1};
    int ey[27] = {0, 0, 0, 1,-1, 0, 0, 1, 1,-1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1, 1,-1,-1, 1, 1,-1,-1};
    int ez[27] = {0, 0, 0, 0, 0, 1,-1, 0, 0, 0, 0, 1, 1,-1,-1, 1, 1,-1,-1, 1, 1, 1, 1,-1,-1,-1,-1};
    int i;
    int topGridIndex = (int)(id.x + (DIM-1)*DIM + id.y*DIM*DIM);
    int bottomGridIndex = (int)(id.x + 0*DIM + id.y*DIM*DIM);
    int rightGridIndex = (int)(DIM-1 + id.y*DIM + id.x*DIM*DIM);
    int leftGridIndex = (int)(0 + id.y*DIM + id.x*DIM*DIM);
    int backGridIndex = (int)(id.x + id.y*DIM + (DIM-1)*DIM*DIM);
    int frontGridIndex = (int)(id.x + id.y*DIM + 0*DIM*DIM);
    for(i = 0; i < 27; i++)
    {
        if(ey[i] == -1) f[topGridIndex*27 + i] = f[topGridIndex*27 + opposites[i]];
        if(ey[i] == 1) f[bottomGridIndex*27 + i] = f[bottomGridIndex*27 + opposites[i]];
        if(ex[i] == -1) f[rightGridIndex*27 + i] = f[rightGridIndex*27 + opposites[i]];
        if(ex[i] == 1) f[leftGridIndex*27 + i] = f[leftGridIndex*27 + opposites[i]];
        if(ez[i] == -1) f[backGridIndex*27 + i] = f[backGridIndex*27 + opposites[i]];
        if(ez[i] == 1) f[frontGridIndex*27 + i] = f[frontGridIndex*27 + opposites[i]];
    }
}